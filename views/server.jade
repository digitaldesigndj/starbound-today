extends layout

block content
  //- if user
  //-   if droplet

  //- h3.page-header #{title}
  //- p

  //- p=JSON.stringify(droplet)
  if droplet.locked
    h3 The Server is locked because an event is processing. Please be patient.
    p shutdowns take about 10 seconds
    p boots take about 30 seconds
    //- p taking a server image takes 2-10 min
    p starting a new server takes 1-2 min
    p this page checks every 5 seconds for you
    style body{ background: url(/img/crazy_loop.gif); } .middle.container { background: rgba(255,255,255,0.7); }
    script.
      window.setInterval(function(){
        location.reload();
      }, 5000);
  else
    
    if droplet && droplet.status == 'off'
      h3.page-header Server Powered Off, Still using tokens.
      if stats
        p Tokens Used so far: #{stats.spent}
      p 
        //- strong #{stats.tokens} Tokens Remaining
      p The Server Image Option Is Not Available Yet
      p
        form(action='#later', method='GET')
          button.btn.btn-warning(type='submit', disabled)
            i.fa.fa-lightbulb-o
            | Take Server Image (3-5+min)
      p
        form(action='/server/#{droplet.id}/poweron', method='GET')
          button.btn.btn-success(type='submit')
            i.fa.fa-lightbulb-o
            | Power On Server
      
      h3
      p Still consuming tokens! - Destroy the server to stop using tokens.
      p
        form(action='/server/#{droplet.id}/destroy', method='GET')
          button.btn.btn-danger(type='submit')
            i.fa.fa-fire
            | Destroy Server



    if droplet && droplet.status == 'active'
      if status 
        h3.page-header 
          a(href='http://#{droplet.ip_address}', target="_blank") Your Server is UP - #{droplet.ip_address}
        p 
          a(href='/server/#{user.server}/players') #{status.playersSeen} Players
          |  have explored 
          a(href='/server/#{user.server}/worlds') #{status.worldsExplored} Worlds
          | .

        p Looks like your server is UP, go play some StarBound!

        //- p Check out the Worlds $SERVER/status/server/worlds
      else 
        h3.page-header Start CommandStar Web API - #{droplet.ip_address}
        p Then you can save and download your Planets!
        p
          form(action='/server/#{droplet.id}/runscript', method='POST')
            input(type='hidden', name='_csrf', value=token)
            input(type='hidden', name='script', value='web')
            input(type='hidden', name='ip_address', value='#{droplet.ip_address}')
            button.btn.btn-success(type='submit')
              i.fa.fa-repeat
              | Start CommandStar (5-10s)

      if stats
        //- .page-header
          h3 Your Server
        //- p=JSON.stringify(stats)
        p#countdown Time Left: 0d, #{stats.time_left}
        //- p Tokens Burned so far: #{stats.consumed_tokens}
        p Tokens Spent: #{user.current_server_used_tokens} (#{Math.round(100*(user.current_server_used_tokens-stats.consumed_tokens))/100} credits/#{stats.consumed_tokens} burned)
        if user.server_tokens-user.used_tokens == 0
          p You have run out of tokens... 
            a(href="http://gum.co/sbtokens", target="_blank") Get more here
        else
          p Token Balance: #{user.server_tokens-user.used_tokens}
          p
            form(action='/server/#{droplet.id}/addtokens/1', method='POST')
              input(type='hidden', name='_csrf', value=token)
              button.btn.btn-success(type='submit')
                i.fa.fa-plus
                if droplet.size_id === 62 
                  | Insert 1 Token (+12 Hrs)
                if droplet.size_id === 65 
                  | Insert 1 Token (+3 Hrs)
                if droplet.size_id === 61 
                  | Insert 1 Token (+1.5 Hrs)

        script.
          function pad(n) {
            return (n < 10) ? ("0" + n) : n;
          }
          var days, hours, minutes, seconds;
          var countdown = document.getElementById("countdown");
          var starting_seconds_left = #{stats.seconds_left};
          setInterval(function () {
              var seconds_left = starting_seconds_left;
              starting_seconds_left--
              days = parseInt(seconds_left / 86400);
              seconds_left = seconds_left % 86400;
              hours = pad(parseInt(seconds_left / 3600));
              seconds_left = seconds_left % 3600;
              minutes = pad(parseInt(seconds_left / 60, 10));
              seconds = pad(parseInt(seconds_left % 60, 10));
              // format countdown string + set tag value
              countdown.innerHTML = "Time Left: " + days + "d, " +
              hours + ":" + minutes + ":" + seconds + "";
          }, 1000);

        if droplet.size_id === 62 
          p 2 Core, 2GB RAM, SSD Server Created #{new Date(droplet.created_at)}
        if droplet.size_id === 65 
          p 4 Core, 8GB RAM, SSD Server Created #{new Date(droplet.created_at)}
        if droplet.size_id === 61 
          p 8 Core, 16GB RAM, SSD Server Created #{new Date(droplet.created_at)}
        if droplet.image_id === 2661158
          p Image: Starbound/CommandStar 15.04.2014
        if droplet.image_id === 2629230
          p Image: Starbound with htop 13.04.2014 (CommandStar Upgrade)


      if user.starrypy
        p Server Wrapper: 
          strong StarryPy3k
        p 
          form.form-horizontal(action='/server/#{droplet.id}/runscript', method='POST')
            input(type='hidden', name='_csrf', value=token)
            input(type='hidden', name='script', value='password')
            input(type='hidden', name='ip_address', value='#{droplet.ip_address}')
            input(type='hidden', name='starrypy', value='false')
            input(type='hidden', name='starbound_password', value='#{user.starbound_password}')
            .form-group
              .col-sm-4
                button.btn.btn-success(type='submit')
                  i.fa.fa-cogs
                  | Revert to Vanilla Starbound
      else
        p You are running Vanilla Starbound.
        .page-header
          h3 StarryPy3k Server Wrapper
        p We also offer StarryPy3k. It is a server wrapper that offers management commands like /help, /ban, /protect, /who, /give, and more!
        p This will restart Starbound
        p 
          form.form-horizontal(action='/server/#{droplet.id}/runscript', method='POST')
            input(type='hidden', name='_csrf', value=token)
            input(type='hidden', name='script', value='password')
            input(type='hidden', name='ip_address', value='#{droplet.ip_address}')
            input(type='hidden', name='starrypy', value='true')
            input(type='hidden', name='starbound_password', value='#{user.starbound_password}')
            .form-group
              .col-sm-4
                button.btn.btn-success(type='submit')
                  i.fa.fa-cogs
                  | Start StarryPy3k Server Wrapper

      if user.starrypy
        .page-header
          h3 Set Owner
        p This sets the StarryPy3k server owner. Login first and do /whoami, then put your UUID here. This will restart StarryPy3k and make you the server owner.
          form.form-horizontal(action='/server/#{droplet.id}/runscript', method='POST')
            input(type='hidden', name='_csrf', value=token)
            input(type='hidden', name='script', value='set_owner')
            input(type='hidden', name='ip_address', value='#{droplet.ip_address}')
            //- input(type='hidden', name='starrypy', value='#{user.starrypy}')
            .form-group
              .col-sm-8
                input.form-control(name='uuid', value='#{user.uuid}', placeholder='Owner UUID')
            .form-group
              .col-sm-4
                button.btn.btn-primary(type='submit')
                  i.fa.fa-cogs
                  | Set Owner

      .page-header
        h3 Password
      p Make your friends type something in.
      //- p Only 1 server password for now. Option for more to be added later.
      p This sets your server password, leave blank to make public, this will restart StarBound &amp; StarryPy
        form.form-horizontal(action='/server/#{droplet.id}/runscript', method='POST')
          input(type='hidden', name='_csrf', value=token)
          input(type='hidden', name='script', value='password')
          input(type='hidden', name='ip_address', value='#{droplet.ip_address}')
          input(type='hidden', name='starrypy', value='#{user.starrypy}')
          .form-group
            .col-sm-4
              input.form-control(name='starbound_password', value='#{user.starbound_password}', placeholder='server password (blank)')
          .form-group
            .col-sm-4
              button.btn.btn-primary(type='submit')
                i.fa.fa-cogs
                | Set Password
      .page-header
        h3 Troubleshoot
      p Having trouble connecting? We've been there.

      p Sometimes the client just does not work or randomly crashes. If this happens, just restart Starbound and try again. If you get the same issue after restarting we need to do some investigation.

      if user.starrypy
        p Since you are running StarryPy, things are more complicated. We need to figure out if the issue is with StarryPy3k or Starbound. The normal Starbound port is 21025, but when we run StarryPy3k, this is changed to 21024. When the wrapper is working, users connect to StarryPy3k on 21025 and the wrapper communicates with the server on 21024.
        p Try connecting to 
          strong.text-info #{droplet.ip_address}:21024 
        p If you can connect to #{droplet.ip_address}:21024 that means that Starbound is running, but StarryPy is not. Restart StarryPy, wait ~1min for it to load and try again.
        p
          form(action='/server/#{droplet.id}/runscript', method='POST')
            input(type='hidden', name='_csrf', value=token)
            input(type='hidden', name='script', value='restart_starrypy3k')
            input(type='hidden', name='ip_address', value='#{droplet.ip_address}')
            button.btn.btn-info(type='submit')
              i.fa.fa-repeat
              | Restart StarryPy3k Process
      else
        p Restart StarBound first, then try doing the Hardware Reboot.
      if user.starrypy
        p If you cannot connect on port 21024, then Starbound is not running and you should Restart the Starbound Process. We can't tell if StarryPy3k is working until Starbound starts.
      p
        form(action='/server/#{droplet.id}/runscript', method='POST')
          input(type='hidden', name='_csrf', value=token)
          input(type='hidden', name='script', value='restart')
          input(type='hidden', name='ip_address', value='#{droplet.ip_address}')
          button.btn.btn-info(type='submit')
            i.fa.fa-repeat
            | Restart Starbound Process
      p If all else fails, restart the server.
      p
        form(action='/server/#{droplet.id}/runscript', method='POST')
          input(type='hidden', name='_csrf', value=token)
          input(type='hidden', name='script', value='soft_restart')
          input(type='hidden', name='ip_address', value='#{droplet.ip_address}')
          button.btn.btn-warning(type='submit')
            i.fa.fa-repeat
            | Soft Server Restart
    
    if droplet && droplet.status == 'active'
      h3.page-header Server Hardware
      p You should never really need this, but here it is just in case. Use the Soft Server Retstart instead.
      p
        a(href='/server/#{droplet.id}/powercycle')
          button.btn.btn-danger
            i.fa.fa-undo
            |  Hardware Reboot
      p There are some things that can only be done after the server has been powered off.
      p
        a(href='/server/#{droplet.id}/poweroff')
          button.btn.btn-danger 
            i.fa.fa-caret-square-o-down 
            | Power Off Server
      br
      br
    //- if droplet
    //-   h3.page-header Server Image (Your Backup Slot)
    //- if user.server.image
    //-   p Your Image Number Is: #{user.server.image}
    //- if image
    //-   p=JSON.stringify(image)
    //-   p You need to shutdown the server before you can take a new image.


    //- p
      form(action='/server/#{droplet.id}/snapshot', method='POST')
        input(type='hidden', name='_csrf', value=token)
        //- input(type='hidden', name='name', value='#{user.profile.name}')
        //- input(type='hidden', name='image', value='#{user.server.image}')
        button.btn.btn-info(type='submit')
          i.fa.fa-save
          | Take A New Image
    //- if user.server.image != '2629230'
      .page-header
        h3 You have a saved server image (beta)
            .page-header
        h3 Restore Your Server Image - #{user.server.image}
      form(action='/server/#{droplet.id}/boot', method='POST')
        input(type='hidden', name='_csrf', value=token)
        input(type='hidden', name='name', value='#{user.profile.domain}')
        input(type='hidden', name='image', value='#{user.server.image}')
        button.btn.btn-primary(type='submit')
          i.fa.fa-cogs
          |  Restore Server

  //- if !droplet && user.server.image
  //- if user.server.image === '' && user.server.id !== '' && droplet.status == 'off'    
    p You have to take your first server image before you can destory your droplet and stop spending tokens.
    P Taking an image will bring your server back up. Just shut it down again.



  //- if !droplet && user.server.image


    //- .page-header
      h3 Start A Brand New Image on a Brand New Server
    //- form(action='/server/#{droplet.id}/boot', method='POST')
      input(type='hidden', name='_csrf', value=token)
      input(type='hidden', name='name', value='#{user.profile.domain}')
      button.btn.btn-primary(type='submit')
        i.fa.fa-cogs
        |  Start New Server

    br
    br


    //- if droplet && droplet.status == 'off' && JSON.stringify(user.server.snapshots) != '[]'
    //-   p
    //-     a(href='/server/#{droplet.id}/boot')
    //-       button.btn.btn-primary Restore Server
    //-   p imageId
    //-   p
    //-     a(href='/server/#{droplet.id}/rebuild')
    //-       button.btn.btn-primary Rebuild Server
    //-   p imageId
      //- p
      //-   a(href='/server/#{droplet.id}/shutdown')
      //-     button.btn.btn-primary Power Cycle Server


    //- if secrets.localAuth
    //-   .page-header
    //-     h3 Change DNS!

    //-   form.form-horizontal(action='/account/password', method='POST')
    //-     input(type='hidden', name='_csrf', value=token)
    //-     .form-group
    //-       label.col-sm-3.control-label(for='password') Hostname
    //-       .col-sm-4
    //-         input.form-control(type='password', name='password', id='password')
    //-     .form-group
    //-       label.col-sm-3.control-label(for='confirmPassword') IP Address
    //-       .col-sm-4
    //-         input.form-control(type='password', name='confirmPassword', id='confirmPassword')
    //-     .form-group
    //-       .col-sm-offset-3.col-sm-4
    //-         button.btn.btn.btn-primary(type='submit')
    //-           i.fa.fa-keyboard-o
    //-           | Change DNS Record
